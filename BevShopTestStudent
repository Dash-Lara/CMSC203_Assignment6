
import static org.junit.Assert.*;

import org.junit.After;
import org.junit.Before;
import org.junit.Test;


public class BevShopTestStudent {
	BevShop b1;
	@Before
	public void setUp() throws Exception {
		b1 = new BevShop();
		b1.startNewOrder(13, Day.FRIDAY, "dlara", 34);
		b1.processAlcoholOrder("Mojito", Size.SMALL);
		b1.processAlcoholOrder("Pina Colada", Size.LARGE);
		b1.processAlcoholOrder("Pink Whitney", Size.MEDIUM);
		b1.processSmoothieOrder("BananaFana", Size.LARGE, 4, false);

	}
	@After
	public void tearDown() throws Exception {
		b1 = null;
	}
	
	@Test
	public void testIsEligibleForMore() {
		assertTrue(b1.isEligibleForMore());
	}
	@Test 
	public void testIsMaxFruit() {
		assertFalse(b1.isMaxFruit(1));
		assertFalse(b1.isMaxFruit(3));
	}
	@Test
	public void testIsValidTime() {
		assertFalse(b1.isValidTime(24));
		assertFalse(b1.isValidTime(23));
		assertTrue(b1.isValidTime(9));
		assertFalse(b1.isValidTime(8));
	}
	
	@Test 
	public void testProcessCoffeeOrder() {

		b1.processCoffeeOrder("Mocha", Size.SMALL, false, false);
		assertFalse(b1.getCurrentOrder().getTotalItems() == 4);
		assertTrue(b1.getCurrentOrder().getTotalItems() == 5);
		assertTrue(b1.getCurrentOrder().getBeverage(4).getBevName().equals("Mocha"));
		assertFalse(b1.getCurrentOrder().getBeverage(4).getBevName().equals("Frapp"));
		assertFalse(b1.getCurrentOrder().getBeverage(4).getSize().equals(Size.LARGE));
		assertTrue(b1.getCurrentOrder().getBeverage(4).getSize().equals(Size.SMALL));
		assertFalse(b1.getCurrentOrder().getBeverage(4).getType().equals(Type.ALCOHOL));
		assertEquals(Type.COFFEE, b1.getCurrentOrder().getBeverage(4).getType());
		

	}
	@Test 
	public void testProcessSmoothieOrder() {
		b1.processSmoothieOrder("Banana-Mango", Size.LARGE, 4, true);

		assertEquals(5, b1.getCurrentOrder().getTotalItems());
		assertEquals("Banana-Mango", b1.getCurrentOrder().getBeverage(4).getBevName());
		assertEquals(Size.LARGE, b1.getCurrentOrder().getBeverage(4).getSize());
		assertEquals(Type.SMOOTHIE, b1.getCurrentOrder().getBeverage(4).getType());
		assertEquals(4, ((Smoothie) b1.getCurrentOrder().getBeverage(4)).getNumOfFruits());

	}
	@Test
	public void testProcessAlcoholOrder() {
		b1.processAlcoholOrder("Mojito", Size.MEDIUM);
		
		assertEquals(5, b1.getCurrentOrder().getTotalItems());
		assertEquals("Mojito", b1.getCurrentOrder().getBeverage(4).getBevName());
	}
	@Test
	public void testTotalMonthlySale() {
		assertEquals(15.0, b1.totalMonthlySale(), .001);
		b1.startNewOrder(6, Day.SUNDAY, "Joel", 89);
		b1.processAlcoholOrder("Gin Fizz", Size.SMALL);
		assertEquals(17.60, b1.totalMonthlySale(), .001);
	}
	@Test
	public void testFindOrder() {
		int testOrderNum = b1.getOrderAtIndex(0).getOrderNo();
		b1.startNewOrder(8, Day.FRIDAY, "Pete", 34);
		b1.processAlcoholOrder("Sidecar", Size.SMALL);
		assertEquals(0, b1.findOrder(testOrderNum));
	}
	
	@Test
	public void testIsValidAge() {
		assertFalse(b1.isValidAge(8));
		assertTrue(b1.isValidAge(21));
	}
	@Test
	public void testTotalOrderPrice(){
		b1.startNewOrder(6, Day.SUNDAY, "Joel", 89);
		b1.processAlcoholOrder("Gin Fizz", Size.SMALL);
		assertEquals(2.60, b1.getOrderAtIndex(1).calcOrderTotal(), .001);
	}
	@Test 
	public void testSortOrder() {
		b1.startNewOrder(6, Day.SUNDAY, "Joel", 89);
		b1.processAlcoholOrder("Gin Fizz", Size.SMALL);
		b1.sortOrders();
		assertTrue(b1.getOrderAtIndex(0).getOrderNo() < b1.getOrderAtIndex(1).getOrderNo());
		assertFalse(b1.getOrderAtIndex(0).getOrderNo() > b1.getOrderAtIndex(1).getOrderNo());
	}
	
}

